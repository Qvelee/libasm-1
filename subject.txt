Chapter I
Introduction
An assembly (or assembler) language, often abbreviated asm, is a low-level programming
language for a computer, or other programmable device, in which there is a very strong
(but often not one-to-one) correspondence between the language and the architecture’s
machine code instructions. Each assembly language is specific to a particular computer
architecture. In contrast, most high-level programming languages are generally portable
across multiple architectures but require interpreting or compiling. Assembly language
may also be called symbolic machine code.
_______________________________________________________________________________________
Глава I
Вступление
Язык ассемблера (или ассемблера), часто сокращенно asm, - это низкоуровневый язык программирования для компьютера или другого программируемого устройства, в котором существует очень сильное (но часто не однозначное) соответствие между языком и инструкциями машинного кода архитектуры. Каждый язык ассемблера специфичен для конкретной компьютерной архитектуры. В отличие от этого, большинство языков программирования высокого уровня обычно переносимы через несколько архитектур, но требуют интерпретации или компиляции. Язык ассемблера также можно назвать символьным машинным кодом.
________________________________________________________________________________________
Chapter II
Common Instructions
• Your functions should not quit unexpectedly (segmentation fault, bus error, double
free, etc) apart from undefined behaviors. If this happens, your project will be
considered non functional and you will receive a 0 during the evaluation.
• Your Makefile must at least contain the rules $(NAME), all, clean, fclean and
re. And must recompile/relink only necessary files.
• To turn in bonuses to your project, you must include a rule bonus to your Makefile,
which will add all the various headers, librairies or functions that are forbidden on
the main part of the project. Bonuses must be in a different file _bonus.{c/h}.
Mandatory and bonus part evaluation is done separately.
• We encourage you to create test programs for your project even though this work
won’t have to be submitted and won’t be graded. It will give you a chance
to easily test your work and your peers’ work. You will find those tests especially
useful during your defence. Indeed, during defence, you are free to use your tests
and/or the tests of the peer you are evaluating.
• Submit your work to your assigned git repository. Only the work in the git repository will be graded. If Deepthought is assigned to grade your work, it will be done
after your peer-evaluations. If an error happens in any section of your work during
Deepthought’s grading, the evaluation will stop.
• You must write 64 bits ASM. Beware of the "calling convention".
• You can’t do inline ASM, you must do ’.s’ files.
• You must compile your assembly code with nasm.
• You must use the Intel syntax, not the AT&T.
______________________________________________________________________________________________
глава II
Общие Инструкции
• Ваши функции не должны завершаться неожиданно (ошибка сегментации, ошибка шины, двойная свобода и т. д.), Кроме неопределенного поведения. Если это произойдет, ваш проект будет считаться нефункциональным, и вы получите 0 во время оценки.
• Ваш файл Makefile должен содержать, по крайней мере, правила $(NAME), all, clean, fclean и re. И должен перекомпилировать/перелинковать только необходимые файлы.
• Чтобы включить бонусы в свой проект, вы должны включить бонус правила в свой Makefile, который добавит все различные заголовки, librairies или функции, запрещенные в основной части проекта. Бонусы должны быть в другом файле _bonus.{з/з}. Обязательная и бонусная часть оценки проводится отдельно.
• Мы рекомендуем вам создавать тестовые программы для вашего проекта, даже если эта работа не будет представлена и не будет оценена. Это даст вам шанс
чтобы легко проверить свою работу и работу своих коллег. Вы найдете эти тесты особенно
полезно во время вашей защиты. Действительно, во время защиты вы можете свободно использовать свои тесты и/или тесты коллег, которых вы оцениваете.
* Отправляйте свою работу в назначенный вам репозиторий git. Оцениваться будет только работа в репозитории git. Если глубокая мысль назначена для оценки вашей работы, она будет выполнена после ваших коллегиальных оценок. Если в каком-либо разделе вашей работы во время оценки deepthought произойдет ошибка, оценка будет остановлена.
• Вы должны написать 64-битный ASM. Остерегайтесь "соглашения о призвании".
• Вы не можете сделать встроенный ASM, вы должны сделать ’.s ' файлы.
• Вы должны скомпилировать свой ассемблерный код с помощью nasm.
• Вы должны использовать синтаксис Intel, а не AT&T.
_________________________________________________________________________________________________
Chapter III
Mandatory part
• The library must be called libasm.a.
• You must submit a main that will test your functions and that will compile with
your library to show that it’s functional.
• You must rewrite the following functions in asm:
◦ ft_strlen (man 3 strlen)
◦ ft_strcpy (man 3 strcpy)
◦ ft_strcmp (man 3 strcmp)
◦ ft_write (man 2 write)
◦ ft_read (man 2 read)
◦ ft_strdup (man 3 strdup, you can call to malloc)
• You must check for errors during syscalls and properly set them when needed
• Your code must set the variable errno properly.
• For that, you are allowed to call the extern ___error
_________________________________________________________________________________________________
глава III
Обязательная часть
* Библиотека должна называться libasm.один.
• Вы должны представить main, который будет тестировать ваши функции и который будет компилироваться с
ваша библиотека, чтобы показать, что она функциональна.
• Вы должны переписать следующие функции в asm:
◦ ft_strlen (man 3 strlen)
◦ ft_strcpy (man 3 strcpy)
◦ ft_strcmp (man 3 strcmp)
◦ ft_write (man 2 write)
◦ ft_read (man 2 read)
◦ ft_strdup (man 3 strdup, вы можете позвонить в malloc)
• Вы должны проверить наличие ошибок во время syscalls и правильно установить их, когда это необходимо
• Ваш код должен правильно установить переменную errno.
• Для этого Вам разрешается вызвать ошибку extern __error
__________________________________________________________________________________________________
Chapter IV
Bonus part
You can rewrite these functions in asm. The linked list function will use the following
structure:
typedef struct s_list
{
void *data;
struct s_list *next;
} t_list;
• ft_atoi_base (like the one in the piscine)
• ft_list_push_front (like the one in the piscine)
• ft_list_size (like the one in the piscine)
• ft_list_sort (like the one in the piscine)
• ft_list_remove_if (like the one in the piscine)
__________________________________________________________________________________________________
глава IV
Бонусная часть
Вы можете переписать эти функции в asm. Функция связанного списка будет использовать следующую структуру:
typedef struct s_list
{
void *data;
struct s_list *next;
} t_list;

• ft_atoi_base (like the one in the piscine)
• ft_list_push_front (like the one in the piscine)
• ft_list_size (like the one in the piscine)
• ft_list_sort (like the one in the piscine)
• ft_list_remove_if (like the one in the piscine)